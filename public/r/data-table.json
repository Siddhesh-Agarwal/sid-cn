{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "data-table",
  "type": "registry:component",
  "title": "Data Table",
  "description": "A highly customizable data table component",
  "dependencies": [
    "lucide-react",
    "@tanstack/react-table"
  ],
  "registryDependencies": [
    "button",
    "dropdown-menu",
    "input",
    "table",
    "select"
  ],
  "files": [
    {
      "path": "registry/new-york/components/data-table/data-table.tsx",
      "content": "\"use client\";\r\n\r\nimport {\r\n  Column,\r\n  ColumnDef,\r\n  ColumnFiltersState,\r\n  SortingState,\r\n  VisibilityState,\r\n  flexRender,\r\n  getCoreRowModel,\r\n  getFilteredRowModel,\r\n  getPaginationRowModel,\r\n  getSortedRowModel,\r\n  useReactTable,\r\n} from \"@tanstack/react-table\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport {\r\n  DropdownMenu,\r\n  DropdownMenuCheckboxItem,\r\n  DropdownMenuContent,\r\n  DropdownMenuItem,\r\n  DropdownMenuSeparator,\r\n  DropdownMenuTrigger,\r\n} from \"@/components/ui/dropdown-menu\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableHeader,\r\n  TableRow,\r\n} from \"@/components/ui/table\";\r\nimport {\r\n  Select,\r\n  SelectContent,\r\n  SelectItem,\r\n  SelectTrigger,\r\n  SelectValue,\r\n} from \"@/components/ui/select\";\r\nimport {\r\n  ChevronLeft,\r\n  ChevronRight,\r\n  ChevronsLeft,\r\n  ChevronsRight,\r\n  ChevronsUpDown,\r\n  EyeOff,\r\n  SortAsc,\r\n  SortDesc,\r\n} from \"lucide-react\";\r\nimport React from \"react\";\r\nimport { cn } from \"@/lib/utils\";\r\n\r\ninterface DataTableProps<TData, TValue> {\r\n  columns: ColumnDef<TData, TValue>[];\r\n  data: TData[];\r\n}\r\n\r\nexport function DataTable<TData, TValue>({\r\n  columns,\r\n  data,\r\n}: DataTableProps<TData, TValue>) {\r\n  const [sorting, setSorting] = React.useState<SortingState>([]);\r\n  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>(\r\n    []\r\n  );\r\n  const [columnVisibility, setColumnVisibility] =\r\n    React.useState<VisibilityState>({});\r\n  const [rowSelection, setRowSelection] = React.useState({});\r\n  const pageSizes: number[] = [10, 25, 50];\r\n\r\n  const table = useReactTable({\r\n    data,\r\n    columns,\r\n    getCoreRowModel: getCoreRowModel(),\r\n    getPaginationRowModel: getPaginationRowModel(),\r\n    onSortingChange: setSorting,\r\n    getSortedRowModel: getSortedRowModel(),\r\n    onColumnFiltersChange: setColumnFilters,\r\n    getFilteredRowModel: getFilteredRowModel(),\r\n    onColumnVisibilityChange: setColumnVisibility,\r\n    onRowSelectionChange: setRowSelection,\r\n    state: {\r\n      sorting,\r\n      columnFilters,\r\n      columnVisibility,\r\n      rowSelection,\r\n    },\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      {/* Filters and row visibility */}\r\n      <div className=\"flex items-center py-4\">\r\n        <Input\r\n          placeholder=\"Filter emails...\"\r\n          value={(table.getColumn(\"email\")?.getFilterValue() as string) ?? \"\"}\r\n          onChange={(event) =>\r\n            table.getColumn(\"email\")?.setFilterValue(event.target.value)\r\n          }\r\n          className=\"max-w-sm\"\r\n        />\r\n        <DropdownMenu>\r\n          <DropdownMenuTrigger asChild>\r\n            <Button\r\n              variant=\"outline\"\r\n              className=\"ml-auto\"\r\n              disabled={table.getAllColumns().length <= 1}\r\n            >\r\n              Columns\r\n            </Button>\r\n          </DropdownMenuTrigger>\r\n          <DropdownMenuContent align=\"end\">\r\n            {table\r\n              .getAllColumns()\r\n              .filter((column) => column.getCanHide())\r\n              .map((column) => {\r\n                return (\r\n                  <DropdownMenuCheckboxItem\r\n                    key={column.id}\r\n                    className=\"capitalize\"\r\n                    checked={column.getIsVisible()}\r\n                    onCheckedChange={(value) =>\r\n                      column.toggleVisibility(!!value)\r\n                    }\r\n                  >\r\n                    {column.id}\r\n                  </DropdownMenuCheckboxItem>\r\n                );\r\n              })}\r\n          </DropdownMenuContent>\r\n        </DropdownMenu>\r\n      </div>\r\n\r\n      {/* The Table */}\r\n      <div className=\"overflow-hidden rounded-md border\">\r\n        <Table>\r\n          <TableHeader>\r\n            {table.getHeaderGroups().map((headerGroup) => (\r\n              <TableRow key={headerGroup.id}>\r\n                {headerGroup.headers.map((header) => {\r\n                  return (\r\n                    <TableHead key={header.id}>\r\n                      {header.isPlaceholder\r\n                        ? null\r\n                        : flexRender(\r\n                            header.column.columnDef.header,\r\n                            header.getContext()\r\n                          )}\r\n                    </TableHead>\r\n                  );\r\n                })}\r\n              </TableRow>\r\n            ))}\r\n          </TableHeader>\r\n          <TableBody>\r\n            {table.getRowModel().rows?.length ? (\r\n              table.getRowModel().rows.map((row) => (\r\n                <TableRow\r\n                  key={row.id}\r\n                  data-state={row.getIsSelected() && \"selected\"}\r\n                >\r\n                  {row.getVisibleCells().map((cell) => (\r\n                    <TableCell key={cell.id}>\r\n                      {flexRender(\r\n                        cell.column.columnDef.cell,\r\n                        cell.getContext()\r\n                      )}\r\n                    </TableCell>\r\n                  ))}\r\n                </TableRow>\r\n              ))\r\n            ) : (\r\n              <TableRow>\r\n                <TableCell\r\n                  colSpan={columns.length}\r\n                  className=\"h-24 text-center\"\r\n                >\r\n                  No results.\r\n                </TableCell>\r\n              </TableRow>\r\n            )}\r\n          </TableBody>\r\n        </Table>\r\n      </div>\r\n\r\n      {/* Pagination */}\r\n      <div className=\"flex items-center space-x-6 lg:space-x-8 py-4\">\r\n        <div className=\"flex items-center space-x-2\">\r\n          <p className=\"text-sm font-medium\">Rows per page</p>\r\n          <Select\r\n            value={`${table.getState().pagination.pageSize}`}\r\n            onValueChange={(value) => {\r\n              table.setPageSize(Number(value));\r\n            }}\r\n            disabled={table.getRowCount() <= pageSizes[0]}\r\n          >\r\n            <SelectTrigger className=\"h-8 w-[70px]\">\r\n              <SelectValue placeholder={table.getState().pagination.pageSize} />\r\n            </SelectTrigger>\r\n            <SelectContent side=\"top\">\r\n              {pageSizes.map((pageSize) => (\r\n                <SelectItem key={pageSize} value={`${pageSize}`}>\r\n                  {pageSize}\r\n                </SelectItem>\r\n              ))}\r\n            </SelectContent>\r\n          </Select>\r\n        </div>\r\n        <div className=\"flex w-[100px] items-center justify-center text-sm font-medium\">\r\n          Page {table.getState().pagination.pageIndex + 1} of{\" \"}\r\n          {table.getPageCount()}\r\n        </div>\r\n        <div className=\"flex items-center space-x-2\">\r\n          <Button\r\n            variant=\"outline\"\r\n            size=\"icon\"\r\n            className=\"hidden size-8 lg:flex\"\r\n            onClick={() => table.setPageIndex(0)}\r\n            disabled={!table.getCanPreviousPage()}\r\n          >\r\n            <span className=\"sr-only\">Go to first page</span>\r\n            <ChevronsLeft />\r\n          </Button>\r\n          <Button\r\n            variant=\"outline\"\r\n            size=\"icon\"\r\n            className=\"size-8\"\r\n            onClick={() => table.previousPage()}\r\n            disabled={!table.getCanPreviousPage()}\r\n          >\r\n            <span className=\"sr-only\">Go to previous page</span>\r\n            <ChevronLeft />\r\n          </Button>\r\n          <Button\r\n            variant=\"outline\"\r\n            size=\"icon\"\r\n            className=\"size-8\"\r\n            onClick={() => table.nextPage()}\r\n            disabled={!table.getCanNextPage()}\r\n          >\r\n            <span className=\"sr-only\">Go to next page</span>\r\n            <ChevronRight />\r\n          </Button>\r\n          <Button\r\n            variant=\"outline\"\r\n            size=\"icon\"\r\n            className=\"hidden size-8 lg:flex\"\r\n            onClick={() => table.setPageIndex(table.getPageCount() - 1)}\r\n            disabled={!table.getCanNextPage()}\r\n          >\r\n            <span className=\"sr-only\">Go to last page</span>\r\n            <ChevronsRight />\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\ninterface DataTableColumnHeaderProps<TData, TValue>\r\n  extends React.HTMLAttributes<HTMLDivElement> {\r\n  column: Column<TData, TValue>;\r\n  title: string;\r\n}\r\n\r\nexport function DataTableColumnHeader<TData, TValue>({\r\n  column,\r\n  title,\r\n  className,\r\n}: DataTableColumnHeaderProps<TData, TValue>) {\r\n  if (!column.getCanSort()) {\r\n    return <div className={cn(className)}>{title}</div>;\r\n  }\r\n\r\n  return (\r\n    <div className={cn(\"flex items-center gap-2\", className)}>\r\n      <DropdownMenu>\r\n        <DropdownMenuTrigger asChild>\r\n          <Button\r\n            variant=\"ghost\"\r\n            size=\"sm\"\r\n            className=\"data-[state=open]:bg-accent -ml-3 h-8\"\r\n          >\r\n            <span>{title}</span>\r\n            {column.getIsSorted() === \"desc\" ? (\r\n              <SortDesc />\r\n            ) : column.getIsSorted() === \"asc\" ? (\r\n              <SortAsc />\r\n            ) : (\r\n              <ChevronsUpDown />\r\n            )}\r\n          </Button>\r\n        </DropdownMenuTrigger>\r\n        <DropdownMenuContent align=\"start\">\r\n          <DropdownMenuItem onClick={() => column.toggleSorting(false)}>\r\n            <SortAsc />\r\n            Asc\r\n          </DropdownMenuItem>\r\n          <DropdownMenuItem onClick={() => column.toggleSorting(true)}>\r\n            <SortDesc />\r\n            Desc\r\n          </DropdownMenuItem>\r\n          <DropdownMenuSeparator />\r\n          <DropdownMenuItem onClick={() => column.toggleVisibility(false)}>\r\n            <EyeOff />\r\n            Hide\r\n          </DropdownMenuItem>\r\n        </DropdownMenuContent>\r\n      </DropdownMenu>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:component"
    }
  ]
}