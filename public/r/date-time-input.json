{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "date-time-input",
  "type": "registry:component",
  "title": "Date Time Input",
  "description": "A beautiful date time input component (form compatible)",
  "dependencies": [
    "date-fns",
    "lucide-react"
  ],
  "registryDependencies": [
    "https://sid-cn.vercel.app/r/button.json",
    "calendar",
    "input",
    "popover"
  ],
  "files": [
    {
      "path": "registry/new-york/components/date-time-input/date-time-input.tsx",
      "content": "\"use client\";\r\n\r\nimport React from \"react\";\r\nimport { format } from \"date-fns\";\r\nimport { CalendarIcon } from \"lucide-react\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\nimport { Button } from \"@/components/button\";\r\nimport { Calendar } from \"@/components/ui/calendar\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport {\r\n  Popover,\r\n  PopoverContent,\r\n  PopoverTrigger,\r\n} from \"@/components/ui/popover\";\r\n\r\ninterface DateTimeInputProps {\r\n  value?: Date;\r\n  onChange?: (date: Date) => void;\r\n  disabled?: boolean;\r\n  name?: string;\r\n  className?: string;\r\n}\r\n\r\nexport function DateTimeInput({\r\n  value,\r\n  onChange,\r\n  disabled = false,\r\n  name,\r\n  className,\r\n}: DateTimeInputProps) {\r\n  const [open, setOpen] = React.useState(false);\r\n  const [selectedDate, setSelectedDate] = React.useState<Date | undefined>(\r\n    value\r\n  );\r\n  const [timeValue, setTimeValue] = React.useState(() => {\r\n    if (value) {\r\n      const hours = value.getHours().toString().padStart(2, \"0\");\r\n      const minutes = value.getMinutes().toString().padStart(2, \"0\");\r\n      return `${hours}:${minutes}`;\r\n    }\r\n    return \"12:00\";\r\n  });\r\n\r\n  const handleDateSelect = (date: Date | undefined) => {\r\n    if (date) {\r\n      const [hours, minutes] = timeValue.split(\":\").map(Number);\r\n      const newDateTime = new Date(date);\r\n      newDateTime.setHours(hours, minutes, 0, 0);\r\n      setSelectedDate(newDateTime);\r\n      onChange?.(newDateTime);\r\n    }\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleTimeChange = (time: string) => {\r\n    setTimeValue(time);\r\n    if (selectedDate) {\r\n      const [hours, minutes] = time.split(\":\").map(Number);\r\n      const newDateTime = new Date(selectedDate);\r\n      newDateTime.setHours(hours, minutes, 0, 0);\r\n      setSelectedDate(newDateTime);\r\n      onChange?.(newDateTime);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={cn(\"space-y-2\", className)}>\r\n      <div className=\"flex gap-2\">\r\n        <Popover open={open} onOpenChange={setOpen}>\r\n          <PopoverTrigger asChild>\r\n            <Button\r\n              id={name}\r\n              variant=\"outline\"\r\n              className={cn(\r\n                \"flex-1 justify-start text-left font-normal\",\r\n                !selectedDate && \"text-muted-foreground\"\r\n              )}\r\n              disabled={disabled}\r\n            >\r\n              <CalendarIcon className=\"mr-2 h-4 w-4\" />\r\n              {selectedDate ? format(selectedDate, \"PPP\") : \"Pick a date\"}\r\n            </Button>\r\n          </PopoverTrigger>\r\n          <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n            <Calendar\r\n              mode=\"single\"\r\n              selected={selectedDate}\r\n              onSelect={handleDateSelect}\r\n              autoFocus\r\n            />\r\n          </PopoverContent>\r\n        </Popover>\r\n\r\n        <div className=\"flex items-center gap-2 min-w-24\">\r\n          <Input\r\n            type=\"time\"\r\n            value={timeValue}\r\n            onChange={(e) => handleTimeChange(e.target.value)}\r\n            disabled={disabled}\r\n            className=\"w-full\"\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      {/* Hidden input for form submission */}\r\n      {name && (\r\n        <input\r\n          type=\"hidden\"\r\n          name={name}\r\n          value={selectedDate ? selectedDate.toISOString() : \"\"}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:component"
    }
  ]
}